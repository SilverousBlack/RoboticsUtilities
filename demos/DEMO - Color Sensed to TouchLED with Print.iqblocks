{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"_2.^beQjx|FGt38A,8(E\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><block type=\"iq_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"-10\"><next><block type=\"iq_control_forever\" id=\"Xeac6c(U_KV(X1(Bvp9O\"><statement name=\"SUBSTACK\"><block type=\"iq_looks_set_touchled_color\" id=\"!IY`z=BCjeD;P#Fq7oRE\"><field name=\"TOUCHLED\">Touch_LED</field><value name=\"COLOR\"><shadow type=\"iq_looks_colorlist\" id=\"LFEvbjs{#cj}93ys|vpK\"><field name=\"COLOR\">none</field></shadow><block type=\"iq_sensing_color_of\" id=\"ve[U.w:4Kd|*CTqW.32[\"><field name=\"COLORSENSOR\">Color_Sensor</field></block></value><next><block type=\"iq_looks_set_cursor_new\" id=\"b`KT81]7ap;24AzH[$:Y\"><field name=\"TARGET\">Brain</field><value name=\"ROW\"><shadow type=\"math_whole_number\" id=\"MRmLr=v9hcg5y1;0J!4m\"><field name=\"NUM\">1</field></shadow></value><value name=\"COLUMN\"><shadow type=\"math_whole_number\" id=\"gug1g`1|`R-VAR:a^a7?\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"iq_looks_print_new\" id=\"Hux?w{e.x,;5$0KqGc)?\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"@1k0tVdis};eM,1Y:Kk}\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"iq_sensing_color_of\" id=\"K4*Dl`]c}*GDT,QnY:`H\"><field name=\"COLORSENSOR\">Color_Sensor</field></block></value><next><block type=\"iq_looks_next_row_new\" id=\"5C;,5Z@wt=/#$2Sm)mNa\"><field name=\"TARGET\">Brain</field><next><block type=\"iq_looks_print_new\" id=\"s!x]N5uWTN;.8d*tcyKw\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"dQ7)/IH]z]VO79]Ur^pZ\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"iq_sensing_brightness_of\" id=\"sQA2FZQrNmclO#L(B^Wj\"><field name=\"COLORSENSOR\">Color_Sensor</field></block></value><next><block type=\"iq_looks_next_row_new\" id=\"LmX)NqO+*GeH)npzLU-o\"><field name=\"TARGET\">Brain</field><next><block type=\"iq_looks_print_new\" id=\"5V5u[k$zU%CtDBfQIZ3I\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\")d)5u~}L9`B.cD~A!P?L\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"iq_sensing_hue_of\" id=\"uat.i8s:0Sv)cCk#]YSD\"><field name=\"COLORSENSOR\">Color_Sensor</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></next></block></xml>","rconfig":[{"port":[3],"name":"Color_Sensor","customName":true,"deviceType":"Color","deviceClass":"colorsensor","setting":{},"triportSourcePort":22},{"port":[2],"name":"Touch_LED","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20220726.10.00.00","appVersion":"2.4.4","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ncolorsensor Color_Sensor = colorsensor(PORT3);\ntouchled Touch_LED = touchled(PORT2);\n\n\n\n// Generated code.\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0, Console_precision = 0;\n\nfloat myVariable;\n\nconst char* convertColorTypeToString(colorType col) {\n  switch (col) {\n    case colorType::none:           return \"none\";\n    case colorType::red:            return \"red\";\n    case colorType::green:          return \"green\";\n    case colorType::blue:           return \"blue\";\n    case colorType::white:          return \"white\";\n    case colorType::yellow:         return \"yellow\";\n    case colorType::orange:         return \"orange\";\n    case colorType::purple:         return \"purple\";\n    case colorType::cyan:           return \"cyan\";\n    case colorType::red_violet:     return \"red_violet\";\n    case colorType::violet:         return \"violet\";\n    case colorType::blue_violet:    return \"blue_violet\";\n    case colorType::blue_green:     return \"blue_green\";\n    case colorType::yellow_green:   return \"yellow_green\";\n    case colorType::yellow_orange:  return \"yellow_orange\";\n    case colorType::red_orange:     return \"red_orange\";\n    case colorType::black:          return \"black\";\n    case colorType::transparent:    return \"transparent\";\n    default:                        return \"\";\n  }\n}\n\n// Used to find the format string for printing numbers with the\n// desired number of decimal places\nconst char* printToBrain_numberFormat() {\n  // look at the current precision setting to find the format string\n  switch(Brain_precision){\n    case 0:  return \"%.0f\"; // 0 decimal places (1)\n    case 1:  return \"%.1f\"; // 1 decimal place  (0.1)\n    case 2:  return \"%.2f\"; // 2 decimal places (0.01)\n    case 3:  return \"%.3f\"; // 3 decimal places (0.001)\n    default: return \"%f\"; // use the print system default for everthing else\n  }\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  while (true) {\n    Touch_LED.setColor(Color_Sensor.colorname());\n    Brain.Screen.setCursor(1, 1);\n    Brain.Screen.print(\"%s\", convertColorTypeToString(Color_Sensor.colorname()));\n    Brain.Screen.newLine();\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(static_cast<float>(Color_Sensor.brightness())));\n    Brain.Screen.newLine();\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(Color_Sensor.hue()));\n  wait(20, msec);\n  }\n  return 0;\n}\n\n\nint main() {\n  whenStarted1();\n}","target":"Physical"}