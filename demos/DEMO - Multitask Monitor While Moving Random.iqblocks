{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"_2.^beQjx|FGt38A,8(E\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">ArbitraryDistance</variable></variables><block type=\"iq_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"-10\"><next><block type=\"iq_looks_set_print_precision_new\" id=\"WNhY9J.IxRP8byKk*{T6\"><field name=\"PRECISION\">0</field><field name=\"TARGET\">Brain</field><next><block type=\"iq_control_forever\" id=\"+.#gOmn9T~}`4WV5b7WF\"><statement name=\"SUBSTACK\"><block type=\"iq_looks_print_new\" id=\"=[9KpK_BuHAOLfO^j$Vd\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"8pyzA4y{UvqTZbL94.==\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"iq_sensing_drive_rotation\" id=\"%ePI)$#+Jb)?-hFK$a%q\"></block></value></block></statement></block></next></block></next></block><block type=\"iq_events_when_started\" id=\"~TbPxh/l1U:PIbQSi$W@\" x=\"570\" y=\"-10\"><next><block type=\"iq_control_forever\" id=\"bn;|/{M/.No0GE;;n2cv\"><statement name=\"SUBSTACK\"><block type=\"iq_drivetrain_drive_for\" id=\"-iG`4sqKDUznCSsgkp]d\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">mm</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"pcc2QiuH)F85[n3r#CAm\"><field name=\"NUM\">200</field></shadow><block type=\"iq_operator_random\" id=\"a)N%.UfZoB8=/c?NFzbO\"><value name=\"FROM\"><shadow type=\"math_number\" id=\"%$VAA3GWH7m_!eigXiU/\"><field name=\"NUM\">1</field></shadow></value><value name=\"TO\"><shadow type=\"math_number\" id=\"KPsutGiVljtXd%lrv276\"><field name=\"NUM\">100</field></shadow></value></block></value><next><block type=\"iq_drivetrain_turn_for\" id=\"YngK,jE%%@QWSjQ@0r^[\"><field name=\"TURNDIRECTION\">right</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"XvZuJs@hq?Wd|~1wFf5Y\"><field name=\"NUM\">10</field></shadow><block type=\"iq_operator_random\" id=\"Aa{9/+;):g0cG1Fq`g%5\"><value name=\"FROM\"><shadow type=\"math_number\" id=\"*24Q],!E|r7KP[3F|l-z\"><field name=\"NUM\">1</field></shadow></value><value name=\"TO\"><shadow type=\"math_number\" id=\"SLCAkXMpOz*d8WO3|*X#\"><field name=\"NUM\">90</field></shadow></value></block></value></block></next></block></statement></block></next></block></xml>","rconfig":[{"port":[1,6,4],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"smart","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"}}],"slot":0,"platform":"IQ","sdkVersion":"20220726.10.00.00","appVersion":"2.4.4","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\nmotor LeftDriveSmart = motor(PORT1, 1, false);\nmotor RightDriveSmart = motor(PORT6, 1, true);\ngyro DrivetrainGyro = gyro(PORT4, true);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainGyro, 200);\n\n\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Gyro\");\n  DrivetrainGyro.calibrate();\n  while (DrivetrainGyro.isCalibrating()) {\n    wait(25, msec);\n  }\n\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\n// Generated code.\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0, Console_precision = 0;\n\nfloat ArbitraryDistance;\n\n// Used to find the format string for printing numbers with the\n// desired number of decimal places\nconst char* printToBrain_numberFormat() {\n  // look at the current precision setting to find the format string\n  switch(Brain_precision){\n    case 0:  return \"%.0f\"; // 0 decimal places (1)\n    case 1:  return \"%.1f\"; // 1 decimal place  (0.1)\n    case 2:  return \"%.2f\"; // 2 decimal places (0.01)\n    case 3:  return \"%.3f\"; // 3 decimal places (0.001)\n    default: return \"%f\"; // use the print system default for everthing else\n  }\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  Brain_precision = 0;\n  while (true) {\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(Drivetrain.rotation(degrees)));\n  wait(20, msec);\n  }\n  return 0;\n}\n\nint mathRandomInt(float a, float b) {\n  if (a > b) {\n    // Swap a and b to ensure a is smaller.\n    float c = a;\n    a = b;\n    b = c;\n  }\n  int tmpA = static_cast<int>(a);\n  int tmpB = static_cast<int>(b);\n  int r = tmpA + rand() / (RAND_MAX / (tmpB - tmpA + 1));\n  return r;\n}\n\n// \"when started\" hat block\nint whenStarted2() {\n  while (true) {\n    Drivetrain.driveFor(forward, static_cast<float>(mathRandomInt(1.0, 100.0)), mm);\n    Drivetrain.turnFor(right, static_cast<float>(mathRandomInt(1.0, 90.0)), degrees);\n  wait(20, msec);\n  }\n  return 0;\n}\n\n\nint main() {\n  // initialize the random number system\n  srand(Brain.Timer.system());\n\n  // Calibrate the Drivetrain Gyro\n  calibrateDrivetrain();\n\n  vex::task ws1(whenStarted2);\n  whenStarted1();\n}","target":"Physical"}